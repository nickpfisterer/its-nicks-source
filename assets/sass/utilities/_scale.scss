// ----------------------------------------
// TYPOGRAPHIC SCALE
// ----------------------------------------

// ========== Helper Functions ========== //
// Convert px values to rem or unitless values
// rem = ($size-px, rem)
// unitless = ($size-px, unitless)
@function convert-px($size-px, $unit) {
	$output: $size-px / 16px;
	@if $unit == rem {
		@return #{$output}rem;
	}
	@if $unit == unitless {
		@return $output;
	}
}

// ========== Ratios ========== //
$golden:                1.618034;
$double-octave:         4;
$major-twelfth:         3;
$major-eleventh:        2.666666667;
$major-tenth:           2.5;
$octave:                2;
$major-seventh:         1.875;
$minor-seventh:         1.777777778;
$major-sixth:           1.666666667;
$minor-sixth:           1.6;
$perfect-fifth:         1.5;
$augmented-fourth:      1.41421;
$perfect-fourth:        1.333333333;
$major-third:           1.25;
$minor-third:           1.2;
$major-second:          1.125;
$minor-second:          1.066666667;

// ========== Scale Factors ========== //
$ideal-text-size:                16px;
$ratio:                          $minor-third;

// ========== Scale ========== //
@function scale($increment, $unit: rem) {

	$output: null !default;

	// Calculate scale values based on $ideal-text-size
	// $ideal-text-size is set in _typography.scss
	$ms-base:    $ideal-text-size;
	$ms-down-1:  $ms-base / $ratio;
	$ms-down-2:  $ms-down-1 / $ratio;
	$ms-down-3:  $ms-down-2 / $ratio;
	$ms-down-4:  $ms-down-3 / $ratio;
	$ms-down-5:  $ms-down-4 / $ratio;
	$ms-down-6:  $ms-down-5 / $ratio;
	$ms-up-1:    $ms-base * $ratio;
	$ms-up-2:    $ms-up-1 * $ratio;
	$ms-up-3:    $ms-up-2 * $ratio;
	$ms-up-4:    $ms-up-3 * $ratio;
	$ms-up-5:    $ms-up-4 * $ratio;
	$ms-up-6:    $ms-up-5 * $ratio;

	// Base value
	@if $increment == base {
		@if $unit == unitless {
			$output: convert-px($ms-base, unitless);
		}
		@else {
			$output: convert-px($ms-base, rem);
		}
	}

	// 6 up the scale
	@if $increment == 1 {
		@if $unit == unitless {
			$output: convert-px($ms-up-1, unitless);
		}
		@else {
			$output: convert-px($ms-up-1, rem);
		}
	}
	@if $increment == 2 {
		@if $unit == unitless {
			$output: convert-px($ms-up-2, unitless);
		}
		@else {
			$output: convert-px($ms-up-2, rem);
		}
	}
	@if $increment == 3 {
		@if $unit == unitless {
			$output: convert-px($ms-up-3, unitless);
		}
		@else {
			$output: convert-px($ms-up-3, rem);
		}
	}
	@if $increment == 4 {
		@if $unit == unitless {
			$output: convert-px($ms-up-4, unitless);
		}
		@else {
			$output: convert-px($ms-up-4, rem);
		}
	}
	@if $increment == 5 {
		@if $unit == unitless {
			$output: convert-px($ms-up-5, unitless);
		}
		@else {
			$output: convert-px($ms-up-5, rem);
		}
	}
	@if $increment == 6 {
		@if $unit == unitless {
			$output: convert-px($ms-up-6, unitless);
		}
		@else {
			$output: convert-px($ms-up-6, rem);
		}
	}

	// 5 down the scale
	@if $increment == -1 {
		@if $unit == unitless {
			$output: convert-px($ms-down-1, unitless);
		}
		@else {
			$output: convert-px($ms-down-1, rem);
		}
	}
	@if $increment == -2 {
		@if $unit == unitless {
			$output: convert-px($ms-down-2, unitless);
		}
		@else {
			$output: convert-px($ms-down-2, rem);
		}
	}
	@if $increment == -3 {
		@if $unit == unitless {
			$output: convert-px($ms-down-3, unitless);
		}
		@else {
			$output: convert-px($ms-down-3, rem);
		}
	}
	@if $increment == -4 {
		@if $unit == unitless {
			$output: convert-px($ms-down-4, unitless);
		}
		@else {
			$output: convert-px($ms-down-4, rem);
		}
	}
	@if $increment == -5 {
		@if $unit == unitless {
			$output: convert-px($ms-down-5, unitless);
		}
		@else {
			$output: convert-px($ms-down-5, rem);
		}
	}
	@if $increment == -6 {
		@if $unit == unitless {
			$output: convert-px($ms-down-6, unitless);
		}
		@else {
			$output: convert-px($ms-down-6, rem);
		}
	}

	// Final output
	@return $output;
}
